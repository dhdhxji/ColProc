#ifndef BINDINGS_H
#define BINDINGS_H

#include <sol/sol.hpp>

#include <string>
#include <memory>

using std::string;

/*[[[cog
##############################
# Retrieve class information #
##############################

import json
import cog
import copy

def read_all(file_path: str):
    with open(file_path, 'r') as f:
        return f.read()

meta = json.loads(read_all(class_meta_path))

]]]*/
//[[[end]]]



/*[[[cog
###############################
# Include all library headers #
###############################

includes = set(c['headerPath'] for c in meta)
for include in includes:
    cog.outl(f'#include "{include}"')

]]]*/
//[[[end]]]


//TODO: filter class by allowed list

// Expand templated classes with all known templates args
/*[[[cog
###############
# DEFINITIONS #
###############

template_specs = {
    'Variable': (
        'int32_t', 'double', 'string'
    ),

    'VariableCallback': (
        'int32_t', 'double', 'string'
    ),

    'VariableConstant': (
        'int32_t', 'double', 'string'
    )
}

exclude_class = (
    'VariableCallback<T>',
)

def is_template(typename: str) -> bool:
    return '<' in typename

def template_pure_name(typename: str) -> str:
    return typename.split('<')[0]

def template_spec_name(typename: str) -> str:
    res = '<'.join(typename.split('<')[1:])
    return ''.join(res.split('>'))

def spec_template(typename:str, ct_name: str, templ_arg: str):
    if template_spec_name(typename) == ct_name:
        return f'{template_pure_name(typename)}<{templ_arg}>'
    else:
        #it is already specified
        return typename

# Assuming that type is one word
def find_type_pos(tokens):
    qualifiers = ('const', 'volatile', 'static', '&', '*', '(', ')', '::', 'std', 'function', '<', '>')
    for i in range(len(tokens)):
        if tokens[i] not in qualifiers:
            return i

def get_pure_type(type_w_qualifiers: str) -> str:
    tokens = type_w_qualifiers.split()
    pos = find_type_pos(tokens)
    return tokens[pos]

def replace_type(type_w_qualifiers: str, new_type: str) ->str:
    tokens = type_w_qualifiers.split()
    pos = find_type_pos(tokens)
    tokens[pos] = new_type
    return ' '.join(tokens)


def gen_class_templates(class_meta, template_spec=template_specs):
    res = []
    
    ctempl_name = template_spec_name(class_meta['className'])
    for spec in template_spec[template_pure_name(class_meta['className'])]:
        c = copy.deepcopy(class_meta)

        c['className'] = spec_template(
            c['className'],
            ctempl_name,
            spec
        )

        if 'rootClass' in c.keys() and is_template(c['rootClass']):
            if template_spec_name(c['rootClass']) == ctempl_name:
                c['rootClass'] = spec_template(c['rootClass'],
                                               ctempl_name,
                                               spec)

        if 'baseClass' in c.keys():
            base_classes = []
            for base in c['baseClass']:
                if is_template(base):
                    if template_spec_name(base) == ctempl_name:
                        base_classes.append(spec_template(c['rootClass'],
                                                        ctempl_name,
                                                        spec)
                        )
                else:
                    base_classes.append(base)
            c['baseClass'] = base_classes
        
        for constr in c['constructors']:
            for arg in constr['arguments']:
                if is_template(arg):
                    arg['type'] = spec_template(
                        arg['type'], 
                        ctempl_name, 
                        spec
                    )
                
                if get_pure_type(arg['type']) == ctempl_name:
                    arg['type'] = replace_type(arg['type'], spec)

        for method in c['methods']:
            if is_template(method['returnType']):
                method['returnType'] = spec_template(
                    method['returnType'],
                    ctempl_name,
                    spec
                )

            if get_pure_type(method['returnType']) == ctempl_name:
                method['returnType'] = replace_type(method['returnType'], spec)

            for arg in method['arguments']:
                if is_template(arg):
                    arg['type'] = spec_template(
                        arg['type'], 
                        ctempl_name, 
                        spec
                    )
                
                if get_pure_type(arg['type']) == ctempl_name:
                    arg['type'] = replace_type(arg['type'], spec)

        res.append(c)

    return res

def find_longest_public_constructor(constructors):
    l_constr = None

    for c in constructors:
        is_public = c['access'] == 'public'

        if l_constr == None and is_public:
            l_constr = c
            continue

        if len(c['arguments']) > len(l_constr['arguments']) and is_public:
            l_constr = c

    return l_constr

def bind_function_name(name):
    if name == 'operator==':
        return '__eq'
    elif name == 'operator+':
        return '__add'
    elif name == 'operator-':
        return '__sub'
    elif name == 'operator*':
        return '__mul'
    elif name == 'operator/':
        return '__div'
    elif name == 'operator%':
        return '__mod'
    else:
        return name
        
def untemplate(name):
    return name.replace("<", "_").replace(">", "")

def find_class_by_name(name: str, classes):
    for c in classes:
        if c["className"] == name:
            return c

    return None

def find_base_class_chain_recursive(name, classes) -> tuple:
    c = find_class_by_name(name, classes)
    if c is None:
        return None

    if "baseClass" in c:
        return (c["baseClass"][0], *find_base_class_chain_recursive(c["baseClass"][0], classes))
    else: 
        return ()

]]]*/
//[[[end]]]


/*[[[cog
classes_to_bind = []
for c in meta:
    if c['className'] in exclude_class:
        continue

    if is_template(c['className']):
        classes_to_bind = classes_to_bind + gen_class_templates(c)
    else:
        classes_to_bind.append(c)

]]]*/
//[[[end]]]

// Variable constant converter
template<class T>
VariableConstant<T> v(const T& var) {
    return VariableConstant<T>(var);
}

// Variable callback converter
template<class T>
std::unique_ptr<Variable<T>> v(IVariableStorage* storage, sol::function cb) {
    VariableCallback<T>* var = new VariableCallback<T>([cb](){
        return cb();
    } );

    storage->addAnonymousVariable(var);

    return std::unique_ptr< VariableCallback<T> >(var);
}

template<class T>
Variable<T>* cast(AbstractVariable* var) {
    return *var;
}

std::vector<ColProc*> colprocVec(sol::variadic_args args) {
    std::vector<ColProc*> vec;
    for(auto item: args) {
        vec.push_back(item);
    }

    return vec;
}

/*[[[cog
cog.outl(f'void {builder_fn_name}_build_lua_state(sol::state& lua, IVariableStorage& storage) ')
]]]*/
//[[[end]]]
{
    //TODO
    //lua.open_libraries(sol::lib::*);

    lua.new_usertype<AbstractVariable>("AbstractVariable", "new", sol::no_constructor);

    /*[[[cog
    ########################
    # Fill up binding code #
    ########################

    for c in classes_to_bind:
        # Put class declaration
        cog.outl(f'lua.new_usertype<{c["className"]}>( \n\t"{untemplate(c["className"])}"')

        # Put the methods
        if 'methods' in c.keys():

            # Group functions with the same name (for overloading)
            methods = {}
            for m in c['methods']:
                if m['name'] not in methods.keys():
                     methods[m['name']] = []

                methods[m['name']].append(m)

            for name, value in methods.items():
                if len(value) >= 2:
                    # gen overloads
                    cog.outl(f'\t, "{bind_function_name(name)}", sol::overload(')
                    
                    func_spec_list = []
                    for m in value:
                        if m['access'] != 'public':
                            continue
                    
                        args = [t['type'] for t in m['arguments']]
                        func_spec = f'static_cast<{m["returnType"]}({c["className"]}::*)( {",".join(args)} )>( &{c["className"]}::{m["name"]} )'
                        func_spec_list.append(func_spec)

                    cog.outl(f'\t {", ".join(func_spec_list)}')
                    
                    cog.outl('\t )')

                else:
                    # gen method
                    m = value[0]
                    if m['access'] != 'public':
                        continue

                    cog.outl(f'\t, "{bind_function_name(m["name"])}", &{c["className"]}::{m["name"]}')

        # Put base classes
        if 'baseClass' in c.keys():
            # Find base classes recursively
            base_class_types = find_base_class_chain_recursive(c['className'], classes_to_bind)

            base_class_sol = f'sol::bases<{", ".join(base_class_types)}>()'
            cog.outl(f'\t, sol::base_classes, {base_class_sol}')

        # Put the constructors
        if not c['isAbstract']:
            if len(c['constructors']) == 0:
                cog.outl("\t//No constructors available")
                cog.outl('\t, "new", sol::no_constructor')
            else:
                constr_spec = list()
                for co in c['constructors']:
                    if co['access'] != 'public':
                        continue
                    
                    args = [t['type'] for t in co['arguments']]
                    constr_spec.append(f'{c["className"]}({", ".join(args)})')
                
                cog.outl(f'\t, "new", sol::constructors<{", ".join(constr_spec)}>()')
        else:
            cog.outl('\t//It is abstract class, do not bind constructors')
            cog.outl('\t, "new", sol::no_constructor')
        
        # TODO
        # Put all properties
        

        cog.outl(');')
    ]]]*/
    //[[[end]]]

    lua["v"] = sol::overload(
        /*[[[cog
        cog.outl( ',\n'.join(f'static_cast<VariableConstant<{t}>(*)(const {t}&)>(&v<{t}>)' for t in template_specs['VariableConstant']) )
        ]]]*/
        //[[[end]]]     
    );

    /*[[[cog
    #Gen vx converters

    for t in template_specs['VariableCallback']:
        name = f'v{t[0]}'
        cb_func = f'static_cast<std::unique_ptr<Variable<{t}>>(*)(IVariableStorage*, sol::function)>(&v<{t}>)'
        cb_bind_func = f'[&storage](sol::function cb){{ return {cb_func}(&storage, cb); }}'

        const_func = f'static_cast<VariableConstant<{t}>(*)(const {t}&)>(&v<{t}>)'

        cog.outl(f'lua["{name}"] = sol::overload( {cb_bind_func}, {const_func} );')
    ]]]*/
    //[[[end]]]

    /*[[[cog
    #Gen cast converters

    for t in template_specs['VariableCallback']:
        name = f'vcast{t[0]}'
        cb_func = f'static_cast<Variable<{t}>*(*)(AbstractVariable*)>(&cast<{t}>)'

        cog.outl(f'lua["{name}"] = {cb_func};')
    ]]]*/
    //[[[end]]]

    lua["colprocVec"] = &colprocVec;

    // Add Info about available classes/funcs/vars to lua
}

#endif // BINDINGS_H

//Exclude     //.addConstructor<void(*)(size_t, size_t, strip_mode_t, rmt_channel_t, gpio_num_t)>()
